If the git status command is too vague for you – you want to know exactly
what you changed, not just which files were changed – you can use the git
diff command.

git diff shows you the exact lines added and removed – the patch, as
it were.



To see what you’ve changed but not yet staged, type git diff with no oth-
er arguments:


$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
Please include a nice description of your changes when you submit your PR;
if we have to read the whole diff to figure out why you're contributing
in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.
If you are starting to work on a particular area, feel free to submit a PR
that highlights your work in progress (and note in the PR title that it's


That command compares what is in your working directory with what is in
your staging area. The result tells you the changes you’ve made that you ha-
ven’t yet staged.


If you want to see what you’ve staged that will go into your next commit, you
can use git diff --staged . This command compares your staged changes
to your last commit:

$ git diff --staged
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+My Project


It’s important to note that git diff by itself doesn’t show all changes
made since your last commit – only changes that are still unstaged. This can be
confusing, because if you’ve staged all of your changes, git diff will give you
no output.
