Working with Remotes
To be able to collaborate on any Git project, you need to know how to manage
your remote repositories. Remote repositories are versions of your project that
are hosted on the Internet or network somewhere. You can have several of
them, each of which generally is either read-only or read/write for you. Collabo-
rating with others involves managing these remote repositories and pushing
and pulling data to and from them when you need to share work. Managing re-
mote repositories includes knowing how to add remote repositories, remove re-
motes that are no longer valid, manage various remote branches and define
them as being tracked or not, and more. In this section, we’ll cover some of
these remote-management skills.

Showing Your Remotes
To see which remote servers you have configured, you can run the git remote
command. It lists the shortnames of each remote handle you’ve specified. If
you’ve cloned your repository, you should at least see origin – that is the de-
fault name Git gives to the server you cloned from:

$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
Resolving deltas: 100% (772/772), done.
Checking connectivity... done.
$ cd ticgit
$ git remote
origin

You can also specify -v , which shows you the URLs that Git has stored for the
shortname to be used when reading and writing to that remote:

$ git remote -v
origin https://github.com/schacon/ticgit (fetch)
origin https://github.com/schacon/ticgit (push)

If you have more than one remote, the command lists them all. For example,
a repository with multiple remotes for working with several collaborators might
look something like this.

$ cd grit
$ git remote -v
bakkdoor https://github.com/bakkdoor/grit (fetch)
bakkdoor https://github.com/bakkdoor/grit (push)
cho45    https://github.com/cho45/grit (fetch)
cho45    https://github.com/cho45/grit (push)
defunkt  https://github.com/defunkt/grit (fetch)
defunkt  https://github.com/defunkt/grit (push)
koke	 git://github.com/koke/grit.git (fetch)
koke     git://github.com/koke/grit.git (push)
origin   git@github.com:mojombo/grit.git (fetch)
origin   git@github.com:mojombo/grit.git (push)

This means we can pull contributions from any of these users pretty easily.
We may additionally have permission to push to one or more of these, though
we can’t tell that here.

Adding Remote Repositories
We’ve mentioned and given some demonstrations of how the clone command
implicitly adds the origin remote for you. Here’s how to add a new remote ex-
plicitly. To add a new remote Git repository as a shortname you can reference
easily, run git remote add <shortname> <url> :

$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin https://github.com/schacon/ticgit (fetch)
origin https://github.com/schacon/ticgit (push)
pb     https://github.com/paulboone/ticgit (fetch)
pb     https://github.com/paulboone/ticgit (push)

Now you can use the string pb on the command line in lieu of the whole URL.
For example, if you want to fetch all the information that Paul has but that you
don’t yet have in your repository, you can run git fetch pb :

$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
* [new branch]      master      -> pb/master
* [new branch]      ticgit      -> pb/ticgit

Paul’s master branch is now accessible locally as pb/master – you can
merge it into one of your branches, or you can check out a local branch at that
point if you want to inspect it.

Fetching and Pulling from Your Remotes
As you just saw, to get data from your remote projects, you can run:
$ git fetch [remote-name]

The command goes out to that remote project and pulls down all the data
from that remote project that you don’t have yet. After you do this, you should
have references to all the branches from that remote, which you can merge in
or inspect at any time.
If you clone a repository, the command automatically adds that remote
repository under the name “origin”. So, git fetch origin fetches any new
work that has been pushed to that server since you cloned (or last fetched
from) it. It’s important to note that the git fetch command only downloads
the data to your local repository – it doesn’t automatically merge it with any of
your work or modify what you’re currently working on. You have to merge it
manually into your work when you’re ready.
If your current branch is set up to track a remote branch (see the next sec-
tion and Chapter 3 for more information), you can use the git pull command
to automatically fetch and then merge that remote branch into your current
branch. This may be an easier or more comfortable workflow for you; and by
default, the git clone command automatically sets up your local master
branch to track the remote master branch (or whatever the default branch is
called) on the server you cloned from. Running git pull generally fetches da-
ta from the server you originally cloned from and automatically tries to merge it
into the code you’re currently working on.
