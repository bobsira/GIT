After you have created several commits, or if you have cloned a repository with
an existing commit history, you’ll probably want to look back to see what has
happened. The most basic and powerful tool to do this is the git log com-
mand.

These examples use a very simple project called “simplegit”. To get the
project, run $ git clone https://github.com/schacon/simplegit-progit

When you run git log in this project, you should get output that looks
something like this:

$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:
Mon Mar 17 21:52:11 2008 -0700
changed the version number
commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:
Sat Mar 15 16:40:33 2008 -0700
removed unnecessary test
commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:
Sat Mar 15 10:31:28 2008 -0700
first commit

By default, with no arguments, git log lists the commits made in that
repository in reverse chronological order – that is, the most recent commits
show up first. As you can see, this command lists each commit with its SHA-1
checksum, the author’s name and email, the date written, and the commit mes-
sage.


A huge number and variety of options to the git log command are avail-
able to show you exactly what you’re looking for. Here, we’ll show you some of
the most popular

One of the more helpful options is -p , which shows the difference intro-
duced in each commit. You can also use -2 , which limits the output to only the
last two entries:



If you want to
see some abbreviated stats for each commit, you can use the --stat option:
$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:
Mon Mar 17 21:52:11 2008 -0700
changed the version number
Rakefile | 2 +-
1 file changed, 1 insertion(+), 1 deletion(-)
commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:
Sat Mar 15 16:40:33 2008 -0700
removed unnecessary test
lib/simplegit.rb | 5 -----
1 file changed, 5 deletions(-)
commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:
Sat Mar 15 10:31:28 2008 -0700
first commit
README
Rakefile
lib/simplegit.rb
3 files changed,
| 6 ++++++
| 23 +++++++++++++++++++++++
| 25 +++++++++++++++++++++++++
54 insertions(+)


As you can see, the --stat option prints below each commit entry a list of
modified files, how many files were changed, and how many lines in those files
were added and removed. It also puts a summary of the information at the end.




Another really useful option is --pretty . This option changes the log out-
put to formats other than the default. A few prebuilt options are available for
you to use. The oneline option prints each commit on a single line, which is
useful if you’re looking at a lot of commits. In addition, the short , full , and
fuller options show the output in roughly the same format but with less or
more information, respectively:


$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit



The most interesting option is format , which allows you to specify your own
log output format. This is especially useful when you’re generating output for
machine parsing – because you specify the format explicitly, you know it won’t
change with updates to Git:

$ git log --pretty=format: "%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
a11bef0 - Scott Chacon, 6 years ago : first commit



lists some of the more useful options that format takes.
Option				Description of Output
%H				Commit hash
%h				abbreviated commit hash
%T				Tree hash
%t				Abbreviated tree hash
%P				Parent hashes
%p				Abbreviated parent hashes
%an				Author name
%ae				Author email
%ad				Author date(format respects the --date=option)
%ar				Author date, relative
%cn				Committer name
%cd				Committer date
%cr				Committer date, relative
%s				Subject

The author is the person who originally wrote the work, whereas the com-
mitter is the person who last applied the work. So, if you send in a patch to a
project and one of the core members applies the patch, both of you get credit –
you as the author, and the core member as the committer.
