To remove a file from Git, you have to remove it from your tracked files (more
accurately, remove it from your staging area) and then commit. The git rm
command does that, and also removes the file from your working directory so
you don’t see it as an untracked file the next time around.


If you simply remove the file from your working directory, it shows up under
the “Changed but not updated” (that is, unstaged) area of your git status
output:

$ rm PROJECTS.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
(use "git add/rm <file>..." to update what will be committed)
(use "git checkout -- <file>..." to discard changes in working directory)
deleted:
PROJECTS.md
no changes added to commit (use "git add" and/or "git commit -a")


Then, if you run git rm , it stages the file’s removal:


$ git rm PROJECTS.md
rm 'PROJECTS.md'
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
(use "git reset HEAD <file>..." to unstage)
deleted:
PROJECTS.md

The next time you commit, the file will be gone and no longer tracked. If you
modified the file and added it to the index already, you must force the removal
with the -f option. This is a safety feature to prevent accidental removal of data
that hasn’t yet been recorded in a snapshot and that can’t be recovered from
Git.
